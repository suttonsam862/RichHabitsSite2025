🚨 Conduct a full audit and patch pass for **every purchasing route** in the Rich Habits platform.

This includes **event registration** (individual and team) and **retail product checkout**.

Your goal is to ensure **zero chance** of:
- Multiple accidental Stripe charges
- Broken confirmation flows
- Shopify sync failures
- Routing mismatches
- Mock or fallback data triggering charges

---

### 🔒 PART 1: STRIPE PAYMENT SAFETY & EVENT REGISTRATION FLOW

✅ Analyze `/register/:id` event flow:
- Ensure that after Stripe payment succeeds, the frontend:
  - Immediately displays a confirmation message or redirects
  - Disables the "Pay" button after it’s clicked
  - Prevents double-clicks / double-submissions
  - Triggers exactly **one** call to `/stripe-payment-success` or webhook processing
- If the user refreshes or hits back, it **should NOT** cause a second charge

✅ In `ProductDetail.tsx`, `StripeCheckout.tsx`, or related:
- Add logic to:
  - Lock UI after Pay button is clicked
  - Show “Processing…” state
  - Block repeated clicks until the redirect or success state is reached

✅ In the Stripe webhook:
- Prevent duplicate registration/order creation using PaymentIntent ID
- Check DB to see if `payment_intent.id` already exists before creating order

✅ In frontend:
- If `paymentIntent` has already succeeded, redirect user to a thank-you page

---

### 🛒 PART 2: SHOPIFY RETAIL CHECKOUT (CART FLOW)

✅ In `/shop/:handle` and `/cart`:
- Confirm “Add to Cart” only works for valid Shopify variant IDs
- Clicking “Checkout” should:
  - Generate Shopify checkout session only once
  - Lock cart UI and disable the Checkout button until redirect
  - Handle edge cases like:
    - Missing product data
    - Network failure
    - Back button on checkout page

✅ Add user feedback (loading spinner, toast, etc.) on checkout clicks

✅ Confirm Shopify orders use real variant IDs and match product names/colors

---

### 🚦 PART 3: ROUTE & UI INTEGRITY

✅ Ensure all routes below:
- Have matching backend support
- Do not 404 or crash
- Trigger backend payment/order flow only once

Routes to check:
- `/events`, `/events/:id`
- `/register/:id`
- `/shop`, `/shop/:handle`
- `/cart`
- `/thank-you` or confirmation screen

✅ If any route results in a blank screen or misfires after payment — patch immediately

✅ Use React Router `<Navigate>` or `useNavigate()` to force redirect after Stripe confirmation

---

### 🧪 PART 4: FINAL SAFEGUARDS

✅ Add one of the following:
- `disableOnClick` on all purchase buttons
- `isSubmitting` state in React to lock UI after submission
- `setTimeout(() => navigate('/thank-you'))` after Stripe success

✅ In backend:
- Add unique constraint on `stripe_payment_intent_id` in DB
- Add server-side guard:
  ```ts
  if (paymentIntentAlreadyProcessed(id)) return res.status(409).json({ error: "Already processed" });
