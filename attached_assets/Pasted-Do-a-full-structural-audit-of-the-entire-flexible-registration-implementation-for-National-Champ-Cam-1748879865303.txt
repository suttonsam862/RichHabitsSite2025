Do a full structural audit of the entire flexible registration implementation for National Champ Camp. Make sure that all components — frontend, backend, schema, and Stripe integration — are properly structured, type-safe, and error-proof. Begin by reviewing the full EventRegistrationForm.tsx to confirm that all conditional logic for showing day-selection options, validating selected dates, and passing data to the backend is cleanly modularized and doesn’t create unmounted component bugs, race conditions, or broken state on refresh. Ensure tooltips are wrapped cleanly within TooltipProvider, and that all JSX structures are properly closed and formatted, especially around dynamically rendered sections like the RadioGroup and date selection.

Then, review the backend logic in routes.ts. Confirm that pricing calculations are not duplicated across multiple branches or redefined with hardcoded values. Use a centralized utility or function for calculating amount based on number of days and discounts. Prefix any logic that needs cleanup with // FIX: or // STRUCTURE: so it’s easy to track. Validate that Stripe payment intent creation uses only validated backend amounts, and that metadata always includes numberOfDays, selectedDates, and pricingTier. Check that there are no accidental conversions between cents and dollars causing Stripe to receive the wrong amount.

Next, inspect the schema in shared/schema.ts. Ensure that fields like numberOfDays and selectedDates are included in both the type definitions and in the database model. Validate that selectedDates is being stored in a consistent format (e.g., array of ISO strings or a comma-separated string) and not causing type conflicts. Also verify that all validation checks match the form fields and reject invalid structures gracefully with user-friendly messages. Log any dropped requests due to validation mismatches.

Finally, premeditate any errors that could occur:
	•	User selects 1 day but submits with no date: should trigger form error
	•	User selects 2 days but only checks one date: should prevent submission
	•	Stripe payment fails or webhook doesn’t fire: registration must be flagged as incomplete and logged
	•	Frontend refresh loses session storage (e.g., selected tier/dates): ensure props are persisted or retrievable

After this audit, restart the app and run full test cases for 1-day, 2-day, and 3-day flows with and without errors. Confirm the Stripe logs show the right metadata and amounts, and ensure tooltips, reroute links, and form UX all behave correctly on mobile and desktop. Let me know once all structural fixes are made and the system is deployment-ready.