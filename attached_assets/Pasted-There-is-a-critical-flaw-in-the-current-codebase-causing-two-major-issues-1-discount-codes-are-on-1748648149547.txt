There is a critical flaw in the current codebase causing two major issues: (1) discount codes are only being applied on the frontend and not affecting the actual Stripe payment, and (2) the team registration route is failing every time a payment attempt is made. To permanently fix this, you need to refactor the backend so that it never trusts or uses any pricing values sent from the frontend. Instead, the backend should validate and calculate the final amount based solely on the submitted discount code and number of wrestlers. For example, in your server/routes.ts file (or wherever the team registration endpoint exists), implement a helper function like getPricePerWrestler(discountCode, teamSize) which returns 19900 (for $199 in cents) only if the discount code is valid (e.g., 'TEAM199') and the team size is 5 or more. If the discount code is invalid or the team is too small, default to the full price (e.g., 29900). Then, multiply the price by the number of wrestlers to get totalAmount, and use this validated value when creating the Stripe payment intent. Under no circumstances should you accept a discountedAmount or finalAmount from the frontend. Your payment intent creation should look like this: stripe.paymentIntents.create({ amount: totalAmount, currency: 'usd', metadata: { team_email, event_slug, team_size, discount_code } }). Additionally, you must wrap this in a try/catch block to handle and log errors, and include validation that totalAmount is not undefined, NaN, or too low (i.e., < 500). Most likely, the reason payment intent creation is currently failing is that the backend is receiving an invalid or undefined amount due to frontend manipulation or missing validation, which causes Stripe to reject the request with a 400 or 500 error. Make sure your Stripe keys (STRIPE_SECRET_KEY, etc.) are properly loaded via environment variables and not null. Finally, confirm that both test and live keys are active, metadata is being stored on all payment intents, and the webhook is handling checkout.session.completed and payment_intent.succeeded to finalize registration. You should also ensure that all frontend payment requests send only the team member data, email, and discount code—not any pricing or totals—and let the backend handle everything else. This approach will eliminate frontend spoofing, fix the team registration failures, and ensure every payment is charged correctly, logged securely, and associated with the right metadata.