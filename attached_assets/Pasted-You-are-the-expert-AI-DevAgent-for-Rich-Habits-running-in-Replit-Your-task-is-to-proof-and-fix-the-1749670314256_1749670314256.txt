You are the expert AI DevAgent for Rich Habits, running in Replit. Your task is to proof and fix the **event registration system** to ensure it works flawlessly with our newly-reorganized UUID-based database. There must be zero errors, no mis-typed IDs, no disconnected flows, and no duplicated or legacy logic. Think of this as mission-critical software.

### CONTEXT:
- Database is updated to UUID-based `events`, `atomic_registrations`, `payments`, etc.
- The frontend still uses legacy numeric `eventId` for events, especially in `/api/team-registration` and event forms.
- There are parallel legacy flows and a new “bulletproof” registration flow.
- We’ve identified critical issues around field naming mismatches (`shirtSize` vs `tShirtSize`, `grade` vs `age`, `contactName` vs `parentName`), API endpoint confusion, validation gaps, and duplicated legacy logic.
- You should fetch and use our code in Replit, including all branches. Open `routes.ts`, `schema.ts`, frontend `TeamRegistration.tsx` and `StripeCheckout.tsx`, and identify the misalignment.

### YOUR OBJECTIVES (start here):
1. Verify and fix the `POST /api/event-registration` endpoint so that:
   - It correctly accepts the UUID `eventId` parameter.
   - It maps all frontend fields to the correct DB schema fields (including `firstName`, `lastName`, `email`, `phone`, `grade`, `tShirtSize`, `contactName`, `gender`, `experienceLevel`).
   - It sanitizes and validates all fields using Zod with bulletproof rules.
2. Ensure the endpoint returns JSON success/failure responses and not HTML.
3. Write a small test (cURL or JS snippet) that:
   a. Creates a new event in the DB (or uses existing).
   b. Submits registration via the endpoint with a valid payload.
   c. Shows the row inserted into `atomic_registrations` with all fields populated correctly.
4. For any changes you draft, show me the diff. After each change, ask me to run and return the test result so we can iterate.
5. Ask clarifying questions before making large changes.

### CONSTRAINTS:
- Do not touch payment logic yet.
- Work across branches; if multiple versions exist, identify which is active and update it.
- If you encounter missing info files, prompt for them before proceeding.

### OUTPUT FORMAT:
- When you propose a patch, provide a diff with context.
- After each patch, ask following questions:
   “Please run this test by executing `npm run test-reg` and share the console output.”

This is step 1. Once this is confirmed working, we’ll proceed to team registration, payment flow, email confirmation, cleanup tasks, etc.

Are we ready? If so, start by loading the file `server/routes.ts` and tell me what you see around the `/api/event-registration` handler.
