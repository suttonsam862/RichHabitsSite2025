I need you to carefully debug and fix all issues in the payment and registration workflow for my Rich Habits clothing and events website. We're using Stripe for payments, Shopify for order tracking, and PostgreSQL for storing registration data. Currently, users are reporting broken or stagnant registration experiences, and our internal systems are logging incomplete, duplicate, or missing data.

First, examine the entire payment processing flow. When a user submits their registration and pays through Stripe, the system should clearly respond with either a success or error state, trigger a database entry in event_registrations, create an order in Shopify using the API, and send a confirmation email. If a discount code is used, Stripe must charge the discounted price only, and Shopify should reflect that same amount.

Next, check that the frontend is calling the correct success endpoint after payment. Right now, users are seeing no visual feedback even after Stripe succeeds. If the frontend is pointing to an outdated or nonexistent endpoint like /api/events/:eventId/stripe-payment-success, either make sure this endpoint exists and processes the payment fully using handleSuccessfulPayment, or re-route to the correct handler. Ensure every success path—either via Stripe webhook or frontend—triggers the same downstream actions: data storage, order creation, and email sending.

Then, verify that free registrations (from 100% discount codes) do not result in duplicate entries. Right now, we're inserting the registration once during discount validation and then again when the user clicks "Complete Registration." This must be streamlined to insert once only, ideally during the confirmation step when full data is available.

Move slowly and fix this in stages:

Start with correcting the endpoint misalignment so that successful payments trigger database storage and user feedback.

Then ensure Shopify order creation is being triggered only once, with correct pricing, form fields, and payment metadata.

Audit the discount code system to confirm that: valid codes adjust pricing correctly, the final charged amount is what appears in Shopify, and bad codes return user-friendly errors.

Ensure all registration attempts are logged accurately in the PostgreSQL database with status (e.g., “paid”, “failed”, “free”) and include Shopify order IDs and discount codes where applicable.

Finally, remove or disable any duplicate logic, especially in free registration handling or webhook overlap, so the flow becomes stable and maintainable.

As you begin making changes, log every important action and failure to the console to confirm what’s happening. Do not rush—confirm each fix works before moving to the next. Let me know after completing each core section (payment, Shopify, discount, database logging), and we’ll verify step by step.