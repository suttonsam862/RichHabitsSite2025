To fix the critical issue where the Stripe payment intent is charging the full amount instead of the discounted total during team registration, you need to ensure that the backend calculates and uses the discounted amount correctly and consistently when creating the payment intent. Right now, even though the discount code is being applied visually and the discounted amount is calculated somewhere in the backend logic, that value is not actually being used when the Stripe payment intent is created. Instead, it appears the intent is still being generated using the original, undiscounted base price, which is why users are being charged the full amount regardless of what they see on the screen.

The fix requires that you first identify where the discounted total amount is calculated in your backend, typically stored in a variable like finalTotalAmount or discountedAmount. You need to ensure that this variable is calculated correctly using the logic that accounts for the discount code percentage and the number of athletes in the registration. For example, if the discount code gives 99% off a $199 price per athlete and the team has 5 athletes, the correct total would be $9.95, or 995 in cents, which is the format Stripe expects.

Once you have confirmed that the discounted amount is being calculated and stored in a variable like finalTotalAmount, you need to ensure this is the value actually passed to the Stripe API when the payment intent is created. This is where the issue is most likely happening. You must pass finalTotalAmount directly into the amount field in the stripe.paymentIntents.create() function. The corrected Stripe call should look like this: const paymentIntent = await stripe.paymentIntents.create({ amount: finalTotalAmount, currency: 'usd', metadata: { discount_code: req.body.discountCode || 'none', athlete_count: athletes.length, event_id: req.body.eventId } });. It is essential that no other value or fallback is used for the amount field in this call.

Additionally, right before calling Stripe, add a logging statement such as console.log({ finalTotalAmount }) to confirm the correct value is being passed. Make sure this variable has already been converted to cents if needed — Stripe requires integer values in cents, so $9.95 must be sent as 995. You also need to check that this value isn’t being overwritten by some fallback logic later in the route before the payment intent is created. Sometimes, developers default to a base price constant or accidentally reassign the amount from an older variable before the final Stripe call.

After making these changes, test the registration process again using a valid discount code, such as one for 99% off, and check the following: the frontend should show a total of $9.95, the Stripe dashboard should show a charge for exactly $9.95, and your backend logs should confirm that finalTotalAmount was 995. This will ensure that the amount displayed to the user matches the actual amount they are charged and that discount codes are correctly applied not just visually, but at the payment level. This fix is essential for maintaining user trust and ensuring your payment system is secure, accurate, and compliant.