You are the dev agent for the Rich Habits site. The frontend is connected to Shopify using a full-permission API key. You need to ensure Shopify products display correctly across the entire site ‚Äî including price, routing, and dynamic detail pages.

### CONTEXT:
- Products like ‚ÄúRich Habits Heavyweight Tee‚Äù and ‚ÄúRich Habits Cap‚Äù are synced from Shopify.
- Right now, all prices are showing as `$0.00` even though products have correct prices in Shopify.
- Clicking ‚ÄúView Details‚Äù gives a ‚ÄúProduct Not Found‚Äù error.
- All product data is available from Shopify via Storefront or Admin API (check for `graphql` or `rest` fetch depending on current setup).
- The app is deployed on Replit and styled via a modern React UI.

---

### üéØ OBJECTIVES:

**1. Price Rendering**
- Fix the logic that fetches and displays `product.variants[0].price` or equivalent.
- Confirm the price is fetched from Shopify (not hardcoded or skipped).
- Make sure the price is formatted to `$xx.xx` USD.

**2. Dynamic Product Pages**
- Ensure each product card links to a route like `/product/:handle` or `/shop/:slug`.
- Fix routing if product handles/slugs are missing or mismatched.
- The "Product Not Found" error suggests:
  - Dynamic route isn‚Äôt configured (`[handle].tsx` or `[slug].jsx`)
  - Or the Shopify product data isn‚Äôt being matched correctly inside that route.
- Create or fix the dynamic product page component:
  - Fetch product by handle or ID
  - Display name, price, images, description, and add-to-cart functionality if available
  - Render a proper 404 or fallback if product doesn‚Äôt exist

**3. Routing & URL Generation**
- Ensure each product card (on the homepage or shop page) generates a working URL:
  - Use `product.handle` or `product.slug` to build the route
  - Example: `/product/rich-habits-heavyweight-tee`

**4. Shopify API Fetch**
- Check the current method of fetching products:
  - Is it using the Admin API, Storefront API, or webhook-ing from backend?
  - Confirm credentials are secure (via `.env` or secrets)
- Validate the product list fetch includes title, image, price, handle/slug
- Add missing fields if necessary (e.g., price range, metafields, featured image)

**5. Optional: Add-to-Cart / Checkout**
- If the site supports cart/checkout, ensure the product page includes a valid purchase path:
  - Add-to-cart button
  - Link to checkout with Shopify cart token (if using Storefront API)

---

### ‚úÖ REQUIREMENTS
- Fix product list rendering (name, price, star rating, image).
- Fix ‚ÄúView Details‚Äù ‚Üí route to correct product page.
- Ensure `/product/:handle` or `/shop/:slug` pages fetch Shopify data dynamically.
- Do not hardcode products.
- Do not break any part of the working registration or event system.

---

### üß™ TEST FLOW
Once complete, generate:
- A sample product card JSON
- A test curl or fetch() that loads a product by handle
- A screenshot of the working product detail page
- A working example product URL on the site (e.g., `/product/rich-habits-cap`)

---

Start by:
1. Loading the product card component (`ProductCard.jsx` or equivalent)
2. Opening the product page route (`pages/product/[handle].tsx` or similar)
3. Showing how prices are currently fetched

Then fix each issue step by step.
